{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":1,"numPassedTests":13,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":13,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1581511279030,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should exist on the Tree prototype","location":null,"status":"passed","title":"should exist on the Tree prototype"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should be a function","location":null,"status":"passed","title":"should be a function"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return a Tree instance","location":null,"status":"passed","title":"should return a Tree instance"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return a new Tree instance, not the existing one (depth 0)","location":null,"status":"passed","title":"should return a new Tree instance, not the existing one (depth 0)"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return a new Tree instance, not the existing one (depth 1)","location":null,"status":"passed","title":"should return a new Tree instance, not the existing one (depth 1)"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return an identical tree when the map function is identity (depth 0)","location":null,"status":"passed","title":"should return an identical tree when the map function is identity (depth 0)"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return an identical tree when the map function is identity (depth 1)","location":null,"status":"passed","title":"should return an identical tree when the map function is identity (depth 1)"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return an identical tree when the map function is identity (depth 2)","location":null,"status":"passed","title":"should return an identical tree when the map function is identity (depth 2)"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return an identical tree when the map function is identity (depth 3)","location":null,"status":"passed","title":"should return an identical tree when the map function is identity (depth 3)"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return a tree with doubled values if the function doubles the value (depth 0)","location":null,"status":"passed","title":"should return a tree with doubled values if the function doubles the value (depth 0)"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return a tree with doubled values if the function doubles the value (depth 1)","location":null,"status":"passed","title":"should return a tree with doubled values if the function doubles the value (depth 1)"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return a tree with doubled values if the function doubles the value (depth 2)","location":null,"status":"passed","title":"should return a tree with doubled values if the function doubles the value (depth 2)"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return a tree with doubled values if the function doubles the value (depth 3)","location":null,"status":"passed","title":"should return a tree with doubled values if the function doubles the value (depth 3)"}],"endTime":1581511281546,"message":"","name":"/home/yoona/immersive/im-self-assessments-01/tree-map/tree-map.test.js","startTime":1581511280404,"status":"passed","summary":""}],"wasInterrupted":false}